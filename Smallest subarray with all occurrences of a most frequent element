// https://practice.geeksforgeeks.org/problems/smallest-subarray-with-all-occurrences-of-a-most-frequent-element2258/1

class Solution{
    
  
    ArrayList<Integer> smallestSubsegment(int a[], int n)
    {
        // Complete the function
        int si = -1;
        int li = -1;
        
        int len = 0;
        int mfreq = 0;
        
        HashMap<Integer, Integer> map = new HashMap<>();
        HashMap<Integer, Integer> fi = new HashMap<>();
        
        for(int i = 0; i < a.length; i++){
            if(map.containsKey(a[i]) == false){
                map.put(a[i], 1);
                fi.put(a[i], i);
            } else {
                map.put(a[i], map.get(a[i]) + 1);
            }
            
            if(map.get(a[i]) > mfreq){
                mfreq = map.get(a[i]);
                len = i - fi.get(a[i]) + 1;
                si = fi.get(a[i]);
                li = i;
            } else if(map.get(a[i]) == mfreq && i - fi.get(a[i]) + 1 < len){
                len = i - fi.get(a[i]) + 1;
                si = fi.get(a[i]);
                li = i;
            }
        }
        
        ArrayList<Integer> res = new ArrayList<>();
        for(int i = si; i <= li; i++){
            res.add(a[i]);
        }
        
        return res;
    }
  
    
}
